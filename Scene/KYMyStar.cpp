/*
-----------------------------------------------------------------------------
Filename:    KYMyStar.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/

#include "KYMyStar.h"
#include "../Menu/Radar/Radar.h"

//-------------------------------------------------------------------------------------
#include "../World/Caelum/CaelumModule.h"
#include "../World/Land/Land.h"
#include "../World/Forest/Forest.h"
#include "../Object3D/Object3D.h"
#include "../Missile/Missile.h"
KYMyStar::KYMyStar(void):
	mGui(0),
	mOgrePlatform(0),
	mMenu(0),
	mRadar(0)
{
	mCaelum  = new CaelumModule();
	mLand    = new Land(); 
	mForest  = new Forest();
	mBMP     = new Object3D(0.1);
	mMissile = new Missile();

}
//-------------------------------------------------------------------------------------
#include <MYGUI/MyGUI.h>
#include <MYGUI/MyGUI_OgrePlatform.h>
#include "../Menu/SceneMenu.h"
KYMyStar::~KYMyStar(void)
{
	if(mRadar){
		delete mRadar;
	}
	if(mMenu){
		delete mMenu;
	}
	if(mGui){
		mGui->shutdown();
		delete mGui;
		mGui = 0;
	}
	if(mOgrePlatform){
		mOgrePlatform->shutdown();
		delete mOgrePlatform;
		mOgrePlatform = 0;
	}
	mForest->release(mSceneMgr);
	delete mForest;
	delete mCaelum;
	delete mLand;	
	delete mBMP;
	delete mMissile;
}

void KYMyStar::moveCameraToBeginPos()
{
	mCamera->setPosition(Ogre::Vector3(0,0,80));
    mCamera->lookAt(Ogre::Vector3(0,0,0));
}
//-------------------------------------------------------------------------------------
void KYMyStar::createScene(void)
{
	mCaelum->create_caelum(mSceneMgr, mWindow);	
	mLand->create_land(mSceneMgr);
	mForest->create_trees(mCamera, mSceneMgr);
	mBMP->setSceneMgr(mSceneMgr);
	mBMP->create("bmp.scene", "bmp", "bmp's body");
	mBMP->getBody()->setPosition(70,0,5); 
	mMissile->setSceneMgr(mSceneMgr);
	mMissile->setCamera(mCamera);
	mMissile->create("missile.scene", "Missile", "missile's body");
	mMissile->getBody()->setPosition(0, 0, 0);

}

bool KYMyStar::frameEnded(const Ogre::FrameEvent& evt)
{
	mForest->update();
	mMissile->updateTail(Ogre::Degree(evt.timeSinceLastFrame * 4));
	if(!mMenu->isLoadingTm()){
		mMissile->move();
		if(mRadar){
			mRadar->setMissilePos(mMissile->getBody()->getPosition());
		}
	}
    return true;
}

bool KYMyStar::keyPressed( const OIS::KeyEvent &arg )
{
	MyGUI::InputManager::getInstance().injectKeyPress(MyGUI::KeyCode::Enum(arg.key), arg.text);

	if (arg.key == OIS::KC_Z){
		mMissile->decSpeed();
	}else
	if(arg.key == OIS::KC_X){
		mMissile->incSpeed();
	}else
	if(arg.key == OIS::KC_C){
		mMissile->stop();
	}else
	if(arg.key == OIS::KC_B){
		mMissile->toBeginPos();
	}else
	if(arg.key == OIS::KC_1){
		mMissile->setGrabCamera();
	}else
   if(mMenu && arg.key == OIS::KC_ESCAPE && mMenu->isPassive()){
	   mMenu->show();
   }
	return BaseApplication::keyPressed(arg);
}

bool KYMyStar::keyReleased( const OIS::KeyEvent &arg)
{
	MyGUI::InputManager::getInstance().injectKeyRelease(MyGUI::KeyCode::Enum(arg.key));
	return BaseApplication::keyReleased(arg);
}

bool KYMyStar::mouseMoved( const OIS::MouseEvent &arg )
{
	MyGUI::InputManager::getInstance().injectMouseMove(arg.state.X.abs, arg.state.Y.abs, arg.state.Z.abs);
	if(mMenu && mMenu->isActive()) return false;
	return BaseApplication::mouseMoved(arg);
}

bool KYMyStar::mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
	MyGUI::InputManager::getInstance().injectMousePress(arg.state.X.abs, arg.state.Y.abs, MyGUI::MouseButton::Enum(id));
	return BaseApplication::mousePressed(arg, id);
}

bool KYMyStar::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
	MyGUI::InputManager::getInstance().injectMouseRelease(arg.state.X.abs, arg.state.Y.abs, MyGUI::MouseButton::Enum(id));
	return BaseApplication::mouseReleased(arg, id);
}

void KYMyStar::loadResources(void)
{
	BaseApplication::loadResources();
	Ogre::ResourceGroupManager& resourceManager = Ogre::ResourceGroupManager::getSingleton(); 
	resourceManager.addResourceLocation("..\\..\\media\\MyGui\\", "FileSystem"); 
}

void KYMyStar::createMyGui()
{
	mOgrePlatform = new MyGUI::OgrePlatform();
	mOgrePlatform->initialise(mWindow, mSceneMgr);
	mGui = new MyGUI::Gui();
	mGui->initialise();
	
	mMenu = new SceneMenu(this, mGui, mMissile);

	mRadar = new Radar(mSceneMgr);
}
